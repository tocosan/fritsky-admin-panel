# .github/workflows/firebase-deployment.yml

name: Deploy to Firebase Hosting on push

on:
  push:
    branches:
      - master # O 'main' si esa es tu rama principal

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4 # Usa la versión más reciente
        with:
          path: . # Checkout en el directorio raíz del job

      # 2. Configurar Node.js
      - name: Use Node.js 18.x # O la versión de Node.js que necesites
        uses: actions/setup-node@v4
        with:
          node-version: 18 # O la versión de Node.js que uses
          cache: 'npm' # Si usas npm para instalar dependencias

      # 3. Instalar dependencias (si tu PWA tiene alguna que necesite build)
      # Si solo usas JS nativo, este paso puede ser opcional, pero es buena práctica.
      - name: Install Dependencies
        run: npm install

      # 4. Desplegar a Firebase Hosting
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0-master # O la versión recomendada
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          # Usa el secreto FIREBASE_SERVICE_ACCOUNT que creaste
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }} 
          # Usa el token de despliegue que creaste
          firebaseToken: ${{ secrets.FIREBASE_TOKEN }} 
          projectId: controlcajafritsky
          # Si tu PWA está en una subcarpeta, especifica 'public' aquí.
          # Si está en la raíz, no es necesario o debe ser '.'.
          # Dado que tu 'public' es '.', no lo añadimos aquí.

      # 5. Cachear node modules (buena práctica para futuras ejecuciones)
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-